[{"C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\index.js":"1","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\App.js":"2","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\reducers\\reducer.js":"3","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\PostForm.js":"4","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\MainPage.js":"5","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\Post.js":"6","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\Header.js":"7","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\Login.js":"8","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\SubPage.js":"9","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\SubForm.js":"10","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\Sidebar.js":"11","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\Search.js":"12","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\Comments.js":"13","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\utils\\axiosWithAuth.js":"14","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\utils\\checkLoggedIn.js":"15","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\utils\\axios.js":"16","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\action\\index.js":"17"},{"size":646,"mtime":1607437211745,"results":"18","hashOfConfig":"19"},{"size":1119,"mtime":1605629244337,"results":"20","hashOfConfig":"19"},{"size":3889,"mtime":1607473734538,"results":"21","hashOfConfig":"19"},{"size":3371,"mtime":1607473028306,"results":"22","hashOfConfig":"19"},{"size":4003,"mtime":1607446978967,"results":"23","hashOfConfig":"19"},{"size":4704,"mtime":1607446978897,"results":"24","hashOfConfig":"19"},{"size":1981,"mtime":1607529503580,"results":"25","hashOfConfig":"19"},{"size":3595,"mtime":1607446979074,"results":"26","hashOfConfig":"19"},{"size":4704,"mtime":1607446978747,"results":"27","hashOfConfig":"19"},{"size":2118,"mtime":1607475407478,"results":"28","hashOfConfig":"19"},{"size":1594,"mtime":1607471326716,"results":"29","hashOfConfig":"19"},{"size":1123,"mtime":1605630475556,"results":"30","hashOfConfig":"19"},{"size":4750,"mtime":1605653486645,"results":"31","hashOfConfig":"19"},{"size":279,"mtime":1607446979080,"results":"32","hashOfConfig":"19"},{"size":106,"mtime":1605542815931,"results":"33","hashOfConfig":"19"},{"size":148,"mtime":1607449346665,"results":"34","hashOfConfig":"19"},{"size":1980,"mtime":1607473725153,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1hlcdpg",{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\index.js",[],["81","82"],"C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\App.js",["83"],"import React from 'react';\nimport './components/PostForm'\nimport './App.css';\nimport PostForm from './components/PostForm';\nimport Posts from './components/MainPage'\nimport Post from './components/Post'\nimport Header from './components/Header'\nimport Login from './components/Login'\nimport SubPage from './components/SubPage'\nimport SubForm from './components/SubForm'\nimport { Route } from 'react-router-dom'\nimport MainPage from './components/MainPage';\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n\n      {/* allows component to re-render even if already inside component by passing in random key */}\n      <Route\n        exact path=\"/\"\n        render={(props) => <MainPage key={props.location.key} />}\n      />\n\n      <Route exact path='/login'>\n        <Login />\n      </Route>\n      <Route exact path='/post/:id'>\n        <Post />\n      </Route>\n      <Route exact path='/postform'>\n        <PostForm />\n      </Route>\n      <Route exact path='/r/:id'>\n        <SubPage />\n      </Route>\n\n      <Route exact path='/subform'>\n        <SubForm />\n      </Route>\n    </div>\n  );\n}\n//\n\nexport default App;\n","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\reducers\\reducer.js",["84","85"],"export const initialState = {\r\n    posts: [],\r\n    filteredPosts: [],\r\n    post: {},\r\n    subreadits: [],\r\n    comments: [],\r\n    loggedIn: false,\r\n    loggedUser: '',\r\n    userId: null,\r\n\r\n}\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"GET_POSTS\":\r\n            return {\r\n                ...state,\r\n                posts: action.payload\r\n            }\r\n        case \"GET_SUBS\":\r\n            return {\r\n                ...state,\r\n                subreadits: action.payload\r\n            }\r\n        case \"LOG_USER_IN\":\r\n\r\n            return {\r\n                ...state,\r\n                loggedIn: true,\r\n                loggedUser: action.payload.username,\r\n                userId: action.payload.id\r\n            }\r\n        case \"LOG_USER_OUT\":\r\n            return {\r\n                ...state,\r\n                loggedIn: false,\r\n                loggedUser: '',\r\n                userId: null\r\n            }\r\n        case \"SET_SINGLE_POST\":\r\n            return {\r\n                ...state,\r\n                post: action.payload\r\n            }\r\n        case \"UP_VOTE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(post => {\r\n                    if (action.payload === post.id)\r\n                        return { ...post, likes: ++post.likes }\r\n                    else return { ...post }\r\n                })\r\n            }\r\n        case \"DOWN_VOTE_POST\":\r\n            return {\r\n                ...state,\r\n                posts: state.posts.map(post => {\r\n                    if (action.payload === post.id)\r\n                        return { ...post, likes: --post.likes }\r\n                    else return { ...post }\r\n                })\r\n            }\r\n        case \"UP_VOTE_SINGLE_POST\":\r\n            return {\r\n                ...state, post: { ...state.post, likes: ++state.post.likes }\r\n            }\r\n        case \"DOWN_VOTE_SINGLE_POST\":\r\n            return {\r\n                ...state, post: { ...state.post, likes: --state.post.likes }\r\n            }\r\n        case \"SET_COMMENTS\":\r\n            return {\r\n                ...state, comments: action.payload\r\n            }\r\n        case \"UPVOTE_COMMENT\":\r\n            return {\r\n                ...state, comments: state.comments.map(comment => {\r\n                    if (action.payload === comment.id)\r\n                        return { ...comment, likes: ++comment.likes }\r\n                    else return { ...comment }\r\n                })\r\n            }\r\n        case \"DOWNVOTE_COMMENT\":\r\n            return {\r\n                ...state, comments: state.comments.map(comment => {\r\n                    if (action.payload === comment.id)\r\n                        return { ...comment, likes: --comment.likes }\r\n                    else return { ...comment }\r\n                })\r\n            }\r\n        case \"DELETE_COMMENT\":\r\n            return {\r\n                ...state, comments: state.comments.filter(comment => {\r\n                    return (comment.id !== action.payload)\r\n                })\r\n\r\n            }\r\n        case \"TOGGLE_LOGIN\":\r\n            return {\r\n                ...state, loggedIn: true\r\n            }\r\n        case \"SEARCH_POSTS\":\r\n            return {\r\n                ...state, posts: state.posts.filter(post => {\r\n                    if (post.title.toLowerCase().indexOf(action.payload.toLowerCase()) !== -1)\r\n                        return post\r\n                })\r\n            }\r\n        case \"DELETE_POST\":\r\n            return {\r\n                ...state, posts: state.posts.filter(post => {\r\n                    if (post.id !== action.payload)\r\n                        return post\r\n                })\r\n            }\r\n        case \"ADD_POST\":\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, action.payload]\r\n            }\r\n\r\n        default: return state\r\n    }\r\n}","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\PostForm.js",["86"],"import React, { useState } from 'react'\r\nimport { axiosWithAuth } from '../utils/axiosWithAuth'\r\nimport { connect } from 'react-redux'\r\nimport { useHistory, Link } from 'react-router-dom'\r\nimport Sidebar from './Sidebar'\r\nimport { addPost } from '../action/index'\r\n\r\nfunction PostForm(props) {\r\n    const history = useHistory()\r\n    const [post, setPost] = useState({ title: '', body: '', subreadit_id: '', user_id: null })\r\n    const [postValid, setPostValid] = useState(true)\r\n\r\n    const changeHandler = (e) => {\r\n        setPost({ ...post, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        //search if subreadit exists\r\n        const tempSub = props.subreadits.filter(s => {\r\n            if (s.name === post.subreadit_id)\r\n                return s\r\n            else\r\n                return\r\n        })\r\n        //check if post is valid\r\n        if (tempSub.length && post.title && post.body) {\r\n            const tempId = localStorage.getItem('user_id')\r\n            const tempPost = { ...post, subreadit_id: tempSub[0].id, user_id: tempId }\r\n            fetchData(tempPost)\r\n        }\r\n        else {\r\n            setPostValid(false)\r\n        }\r\n    }\r\n\r\n    const fetchData = (tempPost) => {\r\n        axiosWithAuth()\r\n            .post('/api/post', tempPost)\r\n            .then(res => {\r\n                props.addPost(res.data)\r\n\r\n                history.push('/')\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"postForm-container\">\r\n            <form className=\"postForm\" onSubmit={submitHandler}>\r\n                <div className=\"createPost\">Create a new post</div>\r\n                <input\r\n                    id=\"title\"\r\n                    name=\"title\"\r\n                    type=\"text\"\r\n                    value={post.title}\r\n                    placeholder=\"Enter title\"\r\n                    onChange={changeHandler}\r\n                />\r\n                <textarea\r\n                    id=\"body\"\r\n                    name=\"body\"\r\n                    className=\"postForm-body\"\r\n                    type=\"textarea\"\r\n                    value={post.body}\r\n                    placeholder=\"Enter body\"\r\n                    onChange={changeHandler}\r\n                />\r\n                <input\r\n                    id=\"subreadit_id\"\r\n                    name=\"subreadit_id\"\r\n                    type=\"text\"\r\n                    value={post.subreadit_id}\r\n                    placeholder=\"Enter a subreadit\"\r\n                    onChange={changeHandler}\r\n                />\r\n                {postValid === false ? <div className=\"err-msg\">Please enter a title, body and a valid subreadit</div> : null}\r\n                {props.loggedIn ?\r\n                    <button className=\"postForm-button\">\r\n                        submit\r\n                    </button> : <div className=\"err-msg\">You need to be <Link to='/login'>logged in</Link> to post</div>\r\n                }\r\n            </form>\r\n            <div className=\"side\">\r\n\r\n                <Sidebar />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        subreadits: state.subreadits,\r\n        loggedIn: state.loggedIn\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { addPost })(PostForm)\r\n","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\MainPage.js",["87","88"],"import React, { useEffect } from 'react'\r\nimport axios from '../utils/axios'\r\nimport { axiosWithAuth } from '../utils/axiosWithAuth'\r\nimport { connect } from 'react-redux'\r\nimport { getPosts, getSubs, upVotePost, downVotePost, deletePost } from '../action/index'\r\nimport Sidebar from '../components/Sidebar'\r\nimport { checkLoggedIn } from '../utils/checkLoggedIn'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Search from './Search'\r\n\r\nconst styleColor = {\r\n    color: \"#007BFD\",\r\n    cursor: \"pointer\"\r\n}\r\n\r\nfunction MainPage(props) {\r\n    const history = useHistory()\r\n\r\n    const postLinkHandler = (post_id) => {\r\n        history.push(`/post/${post_id}`)\r\n    }\r\n\r\n    const subLinkHandler = (name) => {\r\n        history.push(`/r/${name}`)\r\n    }\r\n\r\n    const upVoteHandler = (post_id) => {\r\n        if (checkLoggedIn()) {\r\n            props.upVotePost(post_id)\r\n            axios.put(`/api/post/upvote/${post_id}`)\r\n                .then(res => console.log(res))\r\n                .catch(err => console.log(err))\r\n        }\r\n        else\r\n            history.push(`/login`)\r\n\r\n    }\r\n\r\n    const downVoteHandler = (post_id, post_likes) => {\r\n        if (checkLoggedIn()) {\r\n            if (post_likes <= 0)\r\n                return\r\n            props.downVotePost(post_id)\r\n            axios.put(`/api/post/downvote/${post_id}`)\r\n        }\r\n        else\r\n            history.push(`/login`)\r\n    }\r\n\r\n    const deletePostHandler = (post_id) => {\r\n        axiosWithAuth().delete(`/api/post/${post_id}`)\r\n            .then(res => {\r\n                props.deletePost(post_id)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return (\r\n        < div className=\"main-container\" >\r\n            <div className=\"posts-container\">\r\n                {\r\n                    props.posts.map(post => {\r\n                        return <div className=\"post\" >\r\n                            <div className=\"like-container\">\r\n                                <div className=\"upvote\" onClick={() => { upVoteHandler(post.id) }}>\r\n                                    <i class=\"fa fa-angle-up\"></i>\r\n                                </div>\r\n                                <div className=\"downvote\" onClick={() => { downVoteHandler(post.id, post.likes) }}>\r\n                                    <i class=\"fa fa-angle-down\"></i>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <div onClick={() => postLinkHandler(post.id)} style={{ color: \"#0000FF\", cursor: \"pointer\" }} >{post.title}</div>\r\n                                <div className=\"post-info\">\r\n                                    Posted By:\r\n                                <span>{post.username}</span> on subreadit: <span onClick={() => subLinkHandler(post.subreadit)} style={styleColor}>/r/{post.subreadit}</span>\r\n                                </div>\r\n                                <div className=\"post-info\">Likes: {post.likes}\r\n                                    {localStorage.user_id == post.user_id ?\r\n                                        <span onClick={() => deletePostHandler(post.id)} style={{ color: \"#007BFD\", cursor: \"pointer\" }}>\r\n                                            &nbsp;&nbsp;delete\r\n                                              </span> : null\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    })\r\n                }\r\n            </div >\r\n            <div className=\"side\">\r\n                <Search />\r\n                <Sidebar />\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        posts: state.posts,\r\n        subreadits: state.subreadits,\r\n        userId: state.userId\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { getPosts, getSubs, upVotePost, downVotePost, deletePost })(MainPage)\r\n","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\Post.js",["89","90","91","92"],"import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useHistory, useParams, Link } from 'react-router-dom'\r\nimport axios from '../utils/axios'\r\nimport { axiosWithAuth } from '../utils/axiosWithAuth'\r\nimport SideBar from './Sidebar'\r\nimport Comments from './Comments'\r\nimport { checkLoggedIn } from '../utils/checkLoggedIn'\r\nimport { upVoteSinglePost, downVoteSinglePost, setSinglePost, setComments, deletePost } from '../action/index'\r\n\r\n\r\n\r\nfunction Post(props) {\r\n    //post id\r\n    const { id } = useParams()\r\n\r\n    //user_id\r\n    const tempid = localStorage.getItem('user_id')\r\n    const history = useHistory()\r\n    // post based on id\r\n\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                const resPost = await axios.get(`/api/post/${id}`)\r\n                props.setSinglePost(resPost.data)\r\n                const resComments = await axios.get(`/api/post/${id}/comments`)\r\n                props.setComments(resComments.data)\r\n            }\r\n            catch (err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n\r\n\r\n    const upVoteHandler = (post_id) => {\r\n        if (checkLoggedIn()) {\r\n            props.upVoteSinglePost(post_id)\r\n            axios.put(`/api/post/upvote/${post_id}`)\r\n                .then(res => console.log(res))\r\n                .catch(err => console.log(err))\r\n        }\r\n        else\r\n            history.push(`/login`)\r\n\r\n    }\r\n\r\n    const downVoteHandler = (post_id, post_likes) => {\r\n        if (checkLoggedIn()) {\r\n            if (post_likes <= 0)\r\n                return\r\n            props.downVoteSinglePost(post_id)\r\n            axios.put(`/api/post/downvote/${post_id}`)\r\n                .then(res => console.log(res))\r\n                .catch(err => console.log(err))\r\n        }\r\n        else\r\n            history.push(`/login`)\r\n    }\r\n\r\n    const deletePostHandler = (post_id) => {\r\n        axiosWithAuth().delete(`/api/post/${post_id}`)\r\n            .then(res => {\r\n                props.deletePost(post_id)\r\n                history.push('/')\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"postPage-container\">\r\n\r\n            <div className=\"post-container\">\r\n                <div className=\"post-details\">\r\n                    <div className=\"like-container PostPage\">\r\n                        <div className=\"upvote-container\">\r\n                            <div className=\"upvote\" onClick={() => { upVoteHandler(props.post.id) }}>\r\n                                <i class=\"fa fa-angle-up\"></i>\r\n                            </div>\r\n                            <div className=\"downvote\" onClick={() => { downVoteHandler(props.post.id, props.post.likes) }}>\r\n                                <i class=\"fa fa-angle-down\"></i>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div style={{ color: \"#0000FF\" }}>{props.post.title} </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <div className=\"post-body\"> {props.post.body} </div>\r\n                        <div className=\"post-info\">\r\n                            Posted By: {props.post.username} on subreadit:\r\n                            <span style={{ color: \"#007BFD\", cursor: \"pointer\" }}>\r\n                                <Link to={`/r/${props.post.subreadit}`}>\r\n                                    /r/{props.post.subreadit}\r\n                                </Link>\r\n                            </span>\r\n                        </div>\r\n                        <div className=\"post-info\">\r\n                            Likes: {props.post.likes}    Comments: {props.comments.length}\r\n\r\n                            {localStorage.user_id == props.post.user_id ?\r\n                                <span onClick={() => deletePostHandler(props.post.id)} style={{ color: \"#007BFD\", cursor: \"pointer\" }}>\r\n                                    &nbsp;&nbsp;delete\r\n                                              </span> : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <Comments />\r\n            </div>\r\n            <div className=\"side\">\r\n                <SideBar />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        post: state.post,\r\n        subreadits: state.subreadits,\r\n        comments: state.comments\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { upVoteSinglePost, downVoteSinglePost, setSinglePost, setComments, deletePost })(Post)\r\n","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\Header.js",["93","94","95"],"import React, { useEffect } from 'react'\r\nimport { NavLink, useHistory } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { logUserOut, toggleLogin, getPosts, getSubs } from '../action/index'\r\nimport axios from '../utils/axios'\r\n\r\n\r\nfunction Header(props) {\r\n    const history = useHistory()\r\n    //do not log userout out if site reloaded\r\n    //log users back in with info in local storage\r\n    useEffect(() => {\r\n        if (localStorage.user_id)\r\n            props.toggleLogin()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                const tempPosts = await axios.get('/api/post')\r\n                props.getPosts(tempPosts.data)\r\n                const tempSubs = await axios.get('/r')\r\n                props.getSubs(tempSubs.data)\r\n            }\r\n            catch (err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n\r\n    const logOutHandler = () => {\r\n        localStorage.removeItem('token')\r\n        localStorage.removeItem('user_id')\r\n        props.logUserOut()\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <NavLink to='/' className=\"nav\">\r\n                <img src={'../reddit.png'} className=\"logo\" alt=\"reddit logo\" />\r\n                <div className=\"title\">Readit</div>\r\n\r\n            </NavLink>\r\n            <div className=\"loginNav\">\r\n                {\r\n                    (props.loggedIn) ?\r\n                        <div onClick={logOutHandler}>Logout </div> : null\r\n                }\r\n                <NavLink to='/login' className=\"loginNav\">\r\n                    <div className={props.loggedIn ? \"login\" : \"not-login\"}>Login</div>\r\n                </NavLink >\r\n\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        loggedIn: state.loggedIn\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { logUserOut, toggleLogin, getPosts, getSubs })(Header)\r\n","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\Login.js",["96"],"import React, { useState } from 'react'\r\nimport axios from '../utils/axios'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { logUserIn } from '../action/index'\r\nimport { connect } from 'react-redux'\r\n\r\nconst initialUser = {\r\n    username: \"\",\r\n    password: \"\"\r\n}\r\n\r\n\r\nfunction Login(props) {\r\n    const history = useHistory()\r\n    const [user, setUser] = useState({})\r\n\r\n    //state toggler for user option: register(false) or login(true)\r\n    const [userOption, setUserOption] = useState(true)\r\n    const [badCred, setBadCred] = useState(false)\r\n\r\n    const changeHandler = (e) => {\r\n        setUser({ ...user, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const changeOption = (e) => {\r\n        setUserOption(!userOption)\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if (userOption) {\r\n            axios.post(\"/api/auth/login\", user)\r\n                .then((res) => {\r\n                    localStorage.setItem(\"token\", res.data.token)\r\n                    localStorage.setItem(\"user_id\", res.data.user.id)\r\n                    props.logUserIn(res.data.user)\r\n                    history.push('/')\r\n                })\r\n                .catch(err => setBadCred(true))\r\n        }\r\n        else {\r\n            axios.post(\"/api/auth/register\", user)\r\n                .then((res) => {\r\n                    axios.post(\"/api/auth/login\", user)\r\n                        .then((res) => {\r\n                            localStorage.setItem(\"token\", res.data.token)\r\n                            localStorage.setItem(\"user_id\", res.data.user.id)\r\n                            props.logUserIn(res.data.user)\r\n                            history.push('/')\r\n                        })\r\n                        .catch(err => { console.log(err) })\r\n\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"loginForm-container\">\r\n            <form className=\"loginForm\" onSubmit={submitHandler}>\r\n                <i className=\"fa fa-reddit-square\" aria-hidden=\"true\"></i>\r\n                <h2 className=\"login-banner\">{userOption ? \"LOGIN\" : \"REGISTER\"}</h2>\r\n\r\n                <input\r\n                    name=\"username\"\r\n                    value={user.username}\r\n                    onChange={changeHandler}\r\n                    placeholder=\"Username\"\r\n                    className=\"loginInput\"\r\n                />\r\n\r\n                <input\r\n                    name=\"password\"\r\n                    value={user.password}\r\n                    onChange={changeHandler}\r\n                    placeholder=\"Password\"\r\n                    className=\"loginInput\"\r\n\r\n                />\r\n                <div onClick={changeOption}>\r\n                    {\r\n                        userOption ? <div className=\"login-question\">Not a member?\r\n                            < span style={{ color: \"#007BFD\" }}>Join</span>\r\n                        </div> :\r\n                            <div className=\"login-question\">Already a member?\r\n                                <span style={{ color: \"#007BFD\" }}>login</span>\r\n                            </div>\r\n                    }\r\n\r\n                </div>\r\n                <button className=\"login-button\">Submit</button>\r\n                {\r\n                    badCred ? <div className=\"err-msg\">Wrong Username or Password</div> : null\r\n                }\r\n            </form>\r\n        </div >\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        posts: state.posts\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { logUserIn })(Login)\r\n","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\SubPage.js",[],"C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\SubForm.js",["97"],"import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport { getSubs } from '../action/index'\r\nimport Sidebar from './Sidebar'\r\nimport { axiosWithAuth } from '../utils/axiosWithAuth'\r\n\r\nfunction SubForm(props) {\r\n    const history = useHistory()\r\n    const [subName, setSubName] = useState('')\r\n\r\n    const changeHandler = (e) => {\r\n        setSubName(e.target.value)\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if (!subName) {\r\n            alert(\"subreadit name cannot be blank\")\r\n            return\r\n        }\r\n\r\n        if (props.subreadits.find(item => item.name === subName)) {\r\n            alert(`\"${subName}\" subreadit already exists! `)\r\n            return\r\n        }\r\n\r\n        axiosWithAuth().post(\"/r/\", { name: subName })\r\n            .then(res => {\r\n                props.getSubs(res.data)\r\n                history.push('/')\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className=\"subForm-container\">\r\n\r\n            <form className=\"subForm\" onSubmit={submitHandler}>\r\n                <div className=\"createSub\">Create a new subreadit</div>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={subName}\r\n                    onChange={changeHandler}\r\n                    placeholder=\"Enter new subreadit\"\r\n                />\r\n                {props.loggedIn ?\r\n                    <button className=\"subForm-button\">\r\n                        submit\r\n                    </button> : <div className=\"err-msg\">You need to be <Link to='/login'>logged in</Link> to post</div>\r\n                }\r\n            </form>\r\n            <div className=\"side\">\r\n                <Sidebar />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        subreadits: state.subreadits,\r\n        loggedIn: state.loggedIn\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { getSubs })(SubForm)\r\n\r\n","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\Sidebar.js",["98"],"import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\nimport axios from '../utils/axios'\r\n\r\n\r\n\r\nfunction Sidebar(props) {\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                const tempSubs = await axios.get('/r')\r\n                // props.getSubs(tempSubs.data)\r\n            }\r\n            catch (err) {\r\n                console.log(err)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const history = useHistory()\r\n\r\n    const subLinkHandler = (name) => {\r\n        history.push(`/r/${name}`)\r\n    }\r\n\r\n    const postHandler = (e) => {\r\n        e.preventDefault()\r\n        history.push('/postform')\r\n    }\r\n\r\n    const subHandler = (e) => {\r\n        e.preventDefault()\r\n        history.push('/subform')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button className=\"myButtonP\" onClick={postHandler}>Create Post</button>\r\n            <button className=\"myButtonS\" onClick={subHandler}>Create Sub</button>\r\n            <div style={{ textAlign: \"center\", margin: \"15px 0\" }}>subreadits</div>\r\n            {\r\n                props.subreadits.map(s => {\r\n                    return <div className=\"subs\">\r\n                        <div onClick={() => subLinkHandler(s.name)} className=\"sub\">r/{s.name}</div>\r\n\r\n                    </div>\r\n                })\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        subreadits: state.subreadits\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {})(Sidebar)\r\n","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\Search.js",[],"C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\components\\Comments.js",["99"],"import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { setComments, upVoteComment, downVoteComment, deleteComment } from '../action/index'\r\nimport { axiosWithAuth } from '../utils/axiosWithAuth'\r\nimport { useParams, Link, useHistory } from 'react-router-dom'\r\nimport { checkLoggedIn } from '../utils/checkLoggedIn'\r\n\r\n\r\n\r\nfunction Comments(props) {\r\n    const { id } = useParams()\r\n    const tempid = localStorage.getItem('user_id')\r\n    const history = useHistory()\r\n\r\n    const [reply, setReply] = useState({ body: '', user_id: tempid, post_id: Number(id) })\r\n\r\n\r\n    const changeHandler = (e) => {\r\n        setReply({ ...reply, [e.target.name]: e.target.value })\r\n    }\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        if (!reply.body) {\r\n            alert(\"Comment cannot be blank\")\r\n            return\r\n        }\r\n        axiosWithAuth().post('/api/comment', reply)\r\n            .then(res => {\r\n                console.log(\"comments\", res.data)\r\n                props.setComments(res.data)\r\n\r\n            })\r\n            .catch(err => { console.log(err) })\r\n    }\r\n\r\n    const upVoteHandler = (comment_id) => {\r\n        if (checkLoggedIn()) {\r\n            props.upVoteComment(comment_id)\r\n            axiosWithAuth().put(`/api/comment/upvote/${comment_id}`)\r\n                .then(res => console.log(res))\r\n                .catch(err => console.log(err))\r\n\r\n        }\r\n        else {\r\n            history.push('/login')\r\n        }\r\n    }\r\n\r\n    const downVoteHandler = (comment_id, comment_likes) => {\r\n        if (checkLoggedIn()) {\r\n            if (comment_likes <= 0)\r\n                return\r\n            props.downVoteComment(comment_id)\r\n            axiosWithAuth().put(`/api/comment/downvote/${comment_id}`)\r\n                .then(res => console.log(res))\r\n                .catch(err => console.log(err))\r\n        }\r\n        else {\r\n            history.push('/login')\r\n        }\r\n    }\r\n\r\n    const deleteCommentHandler = (comment_id) => {\r\n        axiosWithAuth().delete(`/api/comment/${comment_id}`)\r\n            .then(res => {\r\n                props.deleteComment(comment_id)\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form className=\"reply-container\" onSubmit={submitHandler}>\r\n                <p>Submit a comment</p>\r\n                <input\r\n                    id=\"body\"\r\n                    type=\"textarea\"\r\n                    name=\"body\"\r\n                    value={reply.body}\r\n                    onChange={changeHandler}\r\n                />\r\n\r\n                {props.loggedIn ? <button>submit</button> : <div className='warning'>You must be <Link to='/login'>logged in</Link> to comment!</div>}\r\n            </form>\r\n\r\n            <div className=\"comments-container\">\r\n                <div>\r\n                    {\r\n                        props.comments.map(comment => {\r\n                            return <div className=\"comments\">\r\n                                <div>\r\n                                    <div className=\"upvote\" onClick={() => { upVoteHandler(comment.id) }}>\r\n                                        <i class=\"fa fa-angle-up\"></i>\r\n                                    </div>\r\n                                    <div className=\"downvote\" onClick={() => { downVoteHandler(comment.id, comment.likes) }}>\r\n                                        <i class=\"fa fa-angle-down\"></i>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <div>{comment.body}</div>\r\n                                    <div className=\"post-info\">Likes: {comment.likes}</div>\r\n                                    <div className=\"post-info\">By: {comment.username}\r\n                                        {comment.user_id == localStorage.user_id ?\r\n                                            <span onClick={() => deleteCommentHandler(comment.id)} style={{ color: \"#007BFD\", cursor: \"pointer\" }}>\r\n                                                &nbsp;&nbsp;delete\r\n                                              </span> : null\r\n                                        }\r\n\r\n                                    </div>\r\n\r\n                                </div>\r\n                            </div>\r\n                        })\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        comments: state.comments,\r\n        loggedIn: state.loggedIn\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { setComments, upVoteComment, downVoteComment, deleteComment })(Comments)\r\n","C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\utils\\axiosWithAuth.js",[],"C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\utils\\checkLoggedIn.js",[],"C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\utils\\axios.js",[],"C:\\Users\\thoma\\Desktop\\git2\\readFront\\readit\\src\\action\\index.js",[],{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":5,"column":8,"nodeType":"106","messageId":"107","endLine":5,"endColumn":13},{"ruleId":"108","severity":1,"message":"109","line":104,"column":58,"nodeType":"110","messageId":"111","endLine":104,"endColumn":60},{"ruleId":"108","severity":1,"message":"109","line":111,"column":58,"nodeType":"110","messageId":"111","endLine":111,"endColumn":60},{"ruleId":"108","severity":1,"message":"112","line":24,"column":17,"nodeType":"113","messageId":"114","endLine":24,"endColumn":23},{"ruleId":"104","severity":1,"message":"115","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":26},{"ruleId":"116","severity":1,"message":"117","line":82,"column":59,"nodeType":"118","messageId":"119","endLine":82,"endColumn":61},{"ruleId":"104","severity":1,"message":"120","line":1,"column":17,"nodeType":"106","messageId":"107","endLine":1,"endColumn":25},{"ruleId":"104","severity":1,"message":"121","line":18,"column":11,"nodeType":"106","messageId":"107","endLine":18,"endColumn":17},{"ruleId":"122","severity":1,"message":"123","line":36,"column":8,"nodeType":"124","endLine":36,"endColumn":10,"suggestions":"125"},{"ruleId":"116","severity":1,"message":"117","line":107,"column":51,"nodeType":"118","messageId":"119","endLine":107,"endColumn":53},{"ruleId":"104","severity":1,"message":"126","line":9,"column":11,"nodeType":"106","messageId":"107","endLine":9,"endColumn":18},{"ruleId":"122","severity":1,"message":"127","line":15,"column":8,"nodeType":"124","endLine":15,"endColumn":10,"suggestions":"128"},{"ruleId":"122","severity":1,"message":"127","line":30,"column":8,"nodeType":"124","endLine":30,"endColumn":10,"suggestions":"129"},{"ruleId":"104","severity":1,"message":"130","line":7,"column":7,"nodeType":"106","messageId":"107","endLine":7,"endColumn":18},{"ruleId":"104","severity":1,"message":"115","line":1,"column":27,"nodeType":"106","messageId":"107","endLine":1,"endColumn":36},{"ruleId":"104","severity":1,"message":"131","line":13,"column":23,"nodeType":"106","messageId":"107","endLine":13,"endColumn":31},{"ruleId":"116","severity":1,"message":"117","line":107,"column":58,"nodeType":"118","messageId":"119","endLine":107,"endColumn":60},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'Posts' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.filter() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'useEffect' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'tempid' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'id' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["134"],"'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["135"],["136"],"'initialUser' is assigned a value but never used.","'tempSubs' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"139","fix":"141"},"Update the dependencies array to be: [id, props]",{"range":"142","text":"143"},"Update the dependencies array to be: [props]",{"range":"144","text":"145"},{"range":"146","text":"145"},[1155,1157],"[id, props]",[512,514],"[props]",[943,945]]